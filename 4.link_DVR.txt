# Distance Vector Routing Algorithm
import sys

# Function to implement the Distance Vector Routing algorithm
def distance_vector_routing(nodes, graph):
    distance = [[sys.maxsize] * nodes for _ in range(nodes)]  # Distance table

    # Initialize the distance to itself as 0
    for i in range(nodes):
        distance[i][i] = 0

    # Input the distance for all directly connected nodes
    for i in range(nodes):
        for j in range(nodes):
            if graph[i][j] != 0:
                distance[i][j] = graph[i][j]

    # Applying the Distance Vector algorithm
    for k in range(nodes):
        for i in range(nodes):
            for j in range(nodes):
                if distance[i][j] > distance[i][k] + distance[k][j]:
                    distance[i][j] = distance[i][k] + distance[k][j]

    return distance

def main():
    # Input the number of routers/nodes
    nodes = int(input("Enter the number of routers: "))
    
    # Input the adjacency matrix (graph of the network)
    print("Enter the cost matrix (enter 0 for no direct connection):")
    graph = []
    for i in range(nodes):
        row = list(map(int, input(f"Enter row {i+1} of the matrix: ").split()))
        graph.append(row)

    # Call the Distance Vector Routing function
    distance = distance_vector_routing(nodes, graph)

    # Display the routing table
    print("\nRouting Table (Shortest Distance Between Nodes):")
    for i in range(nodes):
        for j in range(nodes):
            print(f"{distance[i][j]:5}", end=" ")
        print()

if __name__ == "__main__":
    main()
{{Enter the number of routers: 3
Enter the cost matrix (enter 0 for no direct connection):
Enter row 1 of the matrix: 0 2 7
Enter row 2 of the matrix: 2 0 1
Enter row 3 of the matrix: 7 1 0

Routing Table (Shortest Distance Between Nodes):
    0     2     3 
    2     0     1 
    3     1     0 }}

# Link State Routing Algorithm (Dijkstra's Algorithm)

def min_distance(dist, visited, nodes):
    min_val = float('inf')
    min_index = -1
    for v in range(nodes):
        if dist[v] < min_val and not visited[v]:
            min_val = dist[v]
            min_index = v
    return min_index

def dijkstra(graph, src, nodes):
    dist = [float('inf')] * nodes
    dist[src] = 0
    visited = [False] * nodes

    for _ in range(nodes):
        u = min_distance(dist, visited, nodes)
        visited[u] = True

        for v in range(nodes):
            if graph[u][v] and not visited[v] and dist[u] + graph[u][v] < dist[v]:
                dist[v] = dist[u] + graph[u][v]
    
    return dist

def link_state_routing(nodes, graph):
    for i in range(nodes):
        dist = dijkstra(graph, i, nodes)
        print(f"\nRouting Table for Router {i+1}:")
        for j in range(nodes):
            print(f"Router {i+1} to Router {j+1}: {dist[j]}")

def main():
    # Input the number of routers/nodes
    nodes = int(input("Enter the number of routers: "))
    
    # Input the adjacency matrix (graph of the network)
    print("Enter the cost matrix (enter 0 for no direct connection):")
    graph = []
    for i in range(nodes):
        row = list(map(int, input(f"Enter row {i+1} of the matrix: ").split()))
        graph.append(row)

    # Call the Link State Routing function
    link_state_routing(nodes, graph)

if __name__ == "__main__":
    main()
.....................................................................................................

What is the purpose of the Distance Vector Routing Protocol?

The Distance Vector Routing Protocol is used to help routers determine the shortest path to various nodes in a network by exchanging information with neighboring routers.
What information does a Distance Vector routing table contain?

Each router’s Distance Vector table holds information about the distance to each destination, using metrics like hop count, based on data from neighboring routers.
Explain the "Count to Infinity" problem in Distance Vector Routing.

The "Count to Infinity" issue occurs when routers keep updating each other with increasingly higher path costs to a failed node, leading to incorrect and excessive values in routing tables.
How does Link State Routing differ from Distance Vector Routing in information sharing?

In Link State Routing, each router broadcasts information about its neighbors to every other router in the network through flooding, unlike Distance Vector, which only shares information with direct neighbors.
What algorithm is commonly used in Link State Routing, and why?

Dijkstra’s Algorithm is used in Link State Routing to calculate the shortest path from a router to each node in the network, based on the full topology.
What are the main problems with Link State Routing?

Link State Routing can cause high traffic due to flooding, and it may result in infinite looping of packets if not controlled with a mechanism like the Time to Live (TTL) field​(EXPT_4).
What mechanisms are used to reduce loops in Distance Vector protocols?

Split Horizon, Poison Reverse, and Hold-down Timers are techniques used to prevent routing loops by managing the propagation of routing updates.
